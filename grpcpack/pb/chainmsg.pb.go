// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chainmsg.proto

package rpc_btc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateMultiSigRequest struct {
	MinSignNum           int32    `protobuf:"varint,1,opt,name=minSignNum,proto3" json:"minSignNum,omitempty"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMultiSigRequest) Reset()         { *m = CreateMultiSigRequest{} }
func (m *CreateMultiSigRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMultiSigRequest) ProtoMessage()    {}
func (*CreateMultiSigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8380b8d99192274c, []int{0}
}

func (m *CreateMultiSigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMultiSigRequest.Unmarshal(m, b)
}
func (m *CreateMultiSigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMultiSigRequest.Marshal(b, m, deterministic)
}
func (m *CreateMultiSigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMultiSigRequest.Merge(m, src)
}
func (m *CreateMultiSigRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMultiSigRequest.Size(m)
}
func (m *CreateMultiSigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMultiSigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMultiSigRequest proto.InternalMessageInfo

func (m *CreateMultiSigRequest) GetMinSignNum() int32 {
	if m != nil {
		return m.MinSignNum
	}
	return 0
}

func (m *CreateMultiSigRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type AddressRequest struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressRequest) Reset()         { *m = AddressRequest{} }
func (m *AddressRequest) String() string { return proto.CompactTextString(m) }
func (*AddressRequest) ProtoMessage()    {}
func (*AddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8380b8d99192274c, []int{1}
}

func (m *AddressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressRequest.Unmarshal(m, b)
}
func (m *AddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressRequest.Marshal(b, m, deterministic)
}
func (m *AddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressRequest.Merge(m, src)
}
func (m *AddressRequest) XXX_Size() int {
	return xxx_messageInfo_AddressRequest.Size(m)
}
func (m *AddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddressRequest proto.InternalMessageInfo

func (m *AddressRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type AddressReply struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressReply) Reset()         { *m = AddressReply{} }
func (m *AddressReply) String() string { return proto.CompactTextString(m) }
func (*AddressReply) ProtoMessage()    {}
func (*AddressReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8380b8d99192274c, []int{2}
}

func (m *AddressReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressReply.Unmarshal(m, b)
}
func (m *AddressReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressReply.Marshal(b, m, deterministic)
}
func (m *AddressReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressReply.Merge(m, src)
}
func (m *AddressReply) XXX_Size() int {
	return xxx_messageInfo_AddressReply.Size(m)
}
func (m *AddressReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddressReply proto.InternalMessageInfo

func (m *AddressReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8380b8d99192274c, []int{3}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type BlockCountReply struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockCountReply) Reset()         { *m = BlockCountReply{} }
func (m *BlockCountReply) String() string { return proto.CompactTextString(m) }
func (*BlockCountReply) ProtoMessage()    {}
func (*BlockCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8380b8d99192274c, []int{4}
}

func (m *BlockCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockCountReply.Unmarshal(m, b)
}
func (m *BlockCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockCountReply.Marshal(b, m, deterministic)
}
func (m *BlockCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockCountReply.Merge(m, src)
}
func (m *BlockCountReply) XXX_Size() int {
	return xxx_messageInfo_BlockCountReply.Size(m)
}
func (m *BlockCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlockCountReply proto.InternalMessageInfo

func (m *BlockCountReply) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MiningInfoReply struct {
	Blocks               int64    `protobuf:"varint,1,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Currentblocksize     int64    `protobuf:"varint,2,opt,name=currentblocksize,proto3" json:"currentblocksize,omitempty"`
	Currentblockweight   int64    `protobuf:"varint,3,opt,name=currentblockweight,proto3" json:"currentblockweight,omitempty"`
	Currentblocktx       int64    `protobuf:"varint,4,opt,name=currentblocktx,proto3" json:"currentblocktx,omitempty"`
	Difficulty           float32  `protobuf:"fixed32,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Networkhashps        float32  `protobuf:"fixed32,6,opt,name=networkhashps,proto3" json:"networkhashps,omitempty"`
	Pooledtx             int32    `protobuf:"varint,7,opt,name=pooledtx,proto3" json:"pooledtx,omitempty"`
	Testnet              bool     `protobuf:"varint,8,opt,name=testnet,proto3" json:"testnet,omitempty"`
	Chain                string   `protobuf:"bytes,9,opt,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MiningInfoReply) Reset()         { *m = MiningInfoReply{} }
func (m *MiningInfoReply) String() string { return proto.CompactTextString(m) }
func (*MiningInfoReply) ProtoMessage()    {}
func (*MiningInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8380b8d99192274c, []int{5}
}

func (m *MiningInfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MiningInfoReply.Unmarshal(m, b)
}
func (m *MiningInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MiningInfoReply.Marshal(b, m, deterministic)
}
func (m *MiningInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiningInfoReply.Merge(m, src)
}
func (m *MiningInfoReply) XXX_Size() int {
	return xxx_messageInfo_MiningInfoReply.Size(m)
}
func (m *MiningInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MiningInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_MiningInfoReply proto.InternalMessageInfo

func (m *MiningInfoReply) GetBlocks() int64 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

func (m *MiningInfoReply) GetCurrentblocksize() int64 {
	if m != nil {
		return m.Currentblocksize
	}
	return 0
}

func (m *MiningInfoReply) GetCurrentblockweight() int64 {
	if m != nil {
		return m.Currentblockweight
	}
	return 0
}

func (m *MiningInfoReply) GetCurrentblocktx() int64 {
	if m != nil {
		return m.Currentblocktx
	}
	return 0
}

func (m *MiningInfoReply) GetDifficulty() float32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *MiningInfoReply) GetNetworkhashps() float32 {
	if m != nil {
		return m.Networkhashps
	}
	return 0
}

func (m *MiningInfoReply) GetPooledtx() int32 {
	if m != nil {
		return m.Pooledtx
	}
	return 0
}

func (m *MiningInfoReply) GetTestnet() bool {
	if m != nil {
		return m.Testnet
	}
	return false
}

func (m *MiningInfoReply) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateMultiSigRequest)(nil), "rpc.btc.CreateMultiSigRequest")
	proto.RegisterType((*AddressRequest)(nil), "rpc.btc.AddressRequest")
	proto.RegisterType((*AddressReply)(nil), "rpc.btc.AddressReply")
	proto.RegisterType((*EmptyRequest)(nil), "rpc.btc.EmptyRequest")
	proto.RegisterType((*BlockCountReply)(nil), "rpc.btc.BlockCountReply")
	proto.RegisterType((*MiningInfoReply)(nil), "rpc.btc.MiningInfoReply")
}

func init() { proto.RegisterFile("chainmsg.proto", fileDescriptor_8380b8d99192274c) }

var fileDescriptor_8380b8d99192274c = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdd, 0x6e, 0xda, 0x40,
	0x10, 0x85, 0x83, 0x09, 0x7f, 0xa3, 0xc4, 0xa9, 0x46, 0x49, 0xbb, 0xe2, 0x22, 0x42, 0x56, 0x95,
	0x5a, 0xbd, 0xf0, 0x45, 0xfb, 0x04, 0x21, 0xaa, 0xaa, 0xa8, 0x4a, 0x2e, 0xcc, 0x13, 0x98, 0x65,
	0x30, 0x2b, 0xcc, 0xda, 0xb5, 0xc7, 0x25, 0xee, 0xe3, 0xf4, 0x45, 0xfa, 0x6a, 0x95, 0xd7, 0xc6,
	0x18, 0x42, 0x95, 0x3b, 0xce, 0xd9, 0xb3, 0x87, 0xd5, 0xcc, 0x67, 0xb0, 0xe5, 0x2a, 0x50, 0x7a,
	0x93, 0x85, 0x5e, 0x92, 0xc6, 0x1c, 0xe3, 0x20, 0x4d, 0xa4, 0x37, 0x67, 0xe9, 0xfc, 0x80, 0x9b,
	0x87, 0x94, 0x02, 0xa6, 0xa7, 0x3c, 0x62, 0x35, 0x53, 0xa1, 0x4f, 0x3f, 0x73, 0xca, 0x18, 0x6f,
	0x01, 0x36, 0x4a, 0xcf, 0x54, 0xa8, 0x9f, 0xf3, 0x8d, 0xe8, 0x4c, 0x3a, 0x6e, 0xcf, 0x6f, 0x39,
	0x88, 0x70, 0xbe, 0xa6, 0x22, 0x13, 0xd6, 0xa4, 0xeb, 0x8e, 0x7c, 0xf3, 0xdb, 0xb9, 0x03, 0xfb,
	0x7e, 0xb1, 0x48, 0x29, 0xcb, 0x76, 0x2d, 0xd7, 0xd0, 0x8b, 0x82, 0x39, 0x45, 0xa6, 0x60, 0xe4,
	0x57, 0xc2, 0x71, 0xe1, 0xa2, 0xc9, 0x25, 0x51, 0x81, 0x02, 0x06, 0x41, 0xa5, 0xeb, 0xdc, 0x4e,
	0x3a, 0x36, 0x5c, 0x7c, 0xdb, 0x24, 0x5c, 0xd4, 0x7d, 0xce, 0x27, 0xb8, 0x9a, 0x46, 0xb1, 0x5c,
	0x3f, 0xc4, 0xb9, 0xe6, 0xea, 0xf2, 0x35, 0xf4, 0x64, 0xa9, 0xea, 0x37, 0x56, 0xc2, 0xf9, 0x6b,
	0xc1, 0xd5, 0x93, 0xd2, 0x4a, 0x87, 0x8f, 0x7a, 0x19, 0x57, 0xc9, 0xf7, 0xd0, 0x9f, 0x97, 0x97,
	0xab, 0x7f, 0xe9, 0xfa, 0xb5, 0xc2, 0xcf, 0xf0, 0x4e, 0xe6, 0x69, 0x4a, 0x9a, 0x2b, 0x43, 0xfd,
	0x26, 0x61, 0x99, 0xc4, 0x2b, 0x1f, 0x3d, 0xc0, 0xb6, 0xb7, 0x25, 0x15, 0xae, 0x58, 0x74, 0x4d,
	0xfa, 0xc4, 0x09, 0xde, 0x81, 0xdd, 0x76, 0xf9, 0x45, 0x9c, 0x9b, 0xec, 0x91, 0x5b, 0x8e, 0x7b,
	0xa1, 0x96, 0x4b, 0x25, 0xf3, 0x88, 0x0b, 0xd1, 0x9b, 0x74, 0x5c, 0xcb, 0x6f, 0x39, 0xf8, 0x11,
	0x2e, 0x35, 0xf1, 0x36, 0x4e, 0xd7, 0xab, 0x20, 0x5b, 0x25, 0x99, 0xe8, 0x9b, 0xc8, 0xa1, 0x89,
	0x63, 0x18, 0x26, 0x71, 0x1c, 0xd1, 0x82, 0x5f, 0xc4, 0xc0, 0x8c, 0xa3, 0xd1, 0xe5, 0x90, 0x99,
	0x32, 0xd6, 0xc4, 0x62, 0x38, 0xe9, 0xb8, 0x43, 0x7f, 0x27, 0xcd, 0x04, 0x4b, 0x3c, 0xc4, 0xa8,
	0x5a, 0x92, 0x11, 0x5f, 0xfe, 0x58, 0x00, 0x53, 0x96, 0x33, 0x4a, 0x7f, 0x29, 0x49, 0x78, 0x0f,
	0x97, 0xdf, 0x89, 0x9f, 0x69, 0x5b, 0x6f, 0x0e, 0x3f, 0x78, 0x35, 0x43, 0xde, 0xe1, 0xce, 0xc7,
	0x37, 0xaf, 0x0f, 0x92, 0xa8, 0x70, 0xce, 0xf0, 0x11, 0xec, 0x43, 0xd6, 0xf0, 0xb6, 0x89, 0x9e,
	0x84, 0xf0, 0xff, 0x55, 0x53, 0xf3, 0x9a, 0x3d, 0x0a, 0xb8, 0x4f, 0xb6, 0x79, 0x19, 0x8b, 0xc6,
	0x3e, 0xc2, 0xa6, 0xe9, 0xd8, 0x43, 0xf2, 0x76, 0xc7, 0x11, 0x50, 0xce, 0xd9, 0xbc, 0x6f, 0x3e,
	0xa7, 0xaf, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x26, 0xa1, 0xd9, 0x36, 0x60, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BtcServiceClient is the client API for BtcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BtcServiceClient interface {
	GetNewAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error)
	CreateMultiSig(ctx context.Context, in *CreateMultiSigRequest, opts ...grpc.CallOption) (*AddressReply, error)
	GetBlockCount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BlockCountReply, error)
	GetMiningInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MiningInfoReply, error)
}

type btcServiceClient struct {
	cc *grpc.ClientConn
}

func NewBtcServiceClient(cc *grpc.ClientConn) BtcServiceClient {
	return &btcServiceClient{cc}
}

func (c *btcServiceClient) GetNewAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error) {
	out := new(AddressReply)
	err := c.cc.Invoke(ctx, "/rpc.btc.BtcService/GetNewAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcServiceClient) CreateMultiSig(ctx context.Context, in *CreateMultiSigRequest, opts ...grpc.CallOption) (*AddressReply, error) {
	out := new(AddressReply)
	err := c.cc.Invoke(ctx, "/rpc.btc.BtcService/CreateMultiSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcServiceClient) GetBlockCount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BlockCountReply, error) {
	out := new(BlockCountReply)
	err := c.cc.Invoke(ctx, "/rpc.btc.BtcService/GetBlockCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcServiceClient) GetMiningInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MiningInfoReply, error) {
	out := new(MiningInfoReply)
	err := c.cc.Invoke(ctx, "/rpc.btc.BtcService/GetMiningInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtcServiceServer is the server API for BtcService service.
type BtcServiceServer interface {
	GetNewAddress(context.Context, *AddressRequest) (*AddressReply, error)
	CreateMultiSig(context.Context, *CreateMultiSigRequest) (*AddressReply, error)
	GetBlockCount(context.Context, *EmptyRequest) (*BlockCountReply, error)
	GetMiningInfo(context.Context, *EmptyRequest) (*MiningInfoReply, error)
}

// UnimplementedBtcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBtcServiceServer struct {
}

func (*UnimplementedBtcServiceServer) GetNewAddress(ctx context.Context, req *AddressRequest) (*AddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAddress not implemented")
}
func (*UnimplementedBtcServiceServer) CreateMultiSig(ctx context.Context, req *CreateMultiSigRequest) (*AddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiSig not implemented")
}
func (*UnimplementedBtcServiceServer) GetBlockCount(ctx context.Context, req *EmptyRequest) (*BlockCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockCount not implemented")
}
func (*UnimplementedBtcServiceServer) GetMiningInfo(ctx context.Context, req *EmptyRequest) (*MiningInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningInfo not implemented")
}

func RegisterBtcServiceServer(s *grpc.Server, srv BtcServiceServer) {
	s.RegisterService(&_BtcService_serviceDesc, srv)
}

func _BtcService_GetNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcServiceServer).GetNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.btc.BtcService/GetNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcServiceServer).GetNewAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcService_CreateMultiSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcServiceServer).CreateMultiSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.btc.BtcService/CreateMultiSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcServiceServer).CreateMultiSig(ctx, req.(*CreateMultiSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcService_GetBlockCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcServiceServer).GetBlockCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.btc.BtcService/GetBlockCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcServiceServer).GetBlockCount(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcService_GetMiningInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcServiceServer).GetMiningInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.btc.BtcService/GetMiningInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcServiceServer).GetMiningInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BtcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.btc.BtcService",
	HandlerType: (*BtcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewAddress",
			Handler:    _BtcService_GetNewAddress_Handler,
		},
		{
			MethodName: "CreateMultiSig",
			Handler:    _BtcService_CreateMultiSig_Handler,
		},
		{
			MethodName: "GetBlockCount",
			Handler:    _BtcService_GetBlockCount_Handler,
		},
		{
			MethodName: "GetMiningInfo",
			Handler:    _BtcService_GetMiningInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chainmsg.proto",
}
