package bean

import (
	"LightningOnOmni/bean/chainhash"
	"LightningOnOmni/bean/enum"
)

type Message struct {
	Type      enum.MsgType `json:"type"`
	Sender    string       `json:"sender"`
	Recipient string       `json:"recipient"`
	Data      string       `json:"data"`
}

//type = 1
type User struct {
	Email    string         `json:"email"`
	Password string         `json:"password"`
	State    enum.UserState `json:"state"`
}

//type = -32
type OpenChannelInfo struct {
	ChainHash                chainhash.ChainHash `json:"chain_hash"`
	TemporaryChannelId       chainhash.Hash      `json:"temporary_channel_id"`
	FundingSatoshis          uint64              `json:"funding_satoshis"`
	PushMsat                 uint64              `json:"push_msat"`
	DustLimitSatoshis        uint64              `json:"dust_limit_satoshis"`
	MaxHtlcValueInFlightMsat uint64              `json:"max_htlc_value_in_flight_msat"`
	ChannelReserveSatoshis   uint64              `json:"channel_reserve_satoshis"`
	HtlcMinimumMsat          uint64              `json:"htlc_minimum_msat"`
	FeeRatePerKw             uint32              `json:"feerate_per_kw"`
	ToSelfDelay              uint16              `json:"to_self_delay"`
	MaxAcceptedHtlcs         uint16              `json:"max_accepted_htlcs"`
	FundingPubKey            chainhash.Point     `json:"funding_pubkey"`
	RevocationBasePoint      chainhash.Point     `json:"revocation_basepoint"`
	PaymentBasePoint         chainhash.Point     `json:"payment_basepoint"`
	DelayedPaymentBasePoint  chainhash.Point     `json:"delayed_payment_basepoint"`
	HtlcBasePoint            chainhash.Point     `json:"htlc_basepoint"`
}

//type = -33
type AcceptChannelInfo OpenChannelInfo

//type: -38 (close_channel)
type CloseChannel struct {
	ChannelId    ChannelID            `json:"channel_id"`
	Len          uint16               `json:"len"`
	ScriptPubKey []byte               `json:"script_pub_key"`
	Signature    chainhash.Signauture `json:"signature"`
}

//type: -34 (funding_created)
type FundingCreated struct {
	TemporaryChannelId chainhash.Hash `json:"temporary_channel_id"`
	FunderPubKey       chainhash.Hash `json:"funder_pub_key"`
	PropertyId         int64          `json:"property_id"`
	MaxAssets          float64        `json:"max_assets"`
	AmountA            float64        `json:"amount_a"`
}

//type: -35 (funding_signed)
type FundingSigned struct {
	//the same as the temporary_channel_id in the open_channel message
	TemporaryChannelId chainhash.ChainHash `json:"temporary_channel_id"`
	//the omni address of funder Alice
	FunderPubKey chainhash.Hash `json:"funder_pub_key"`
	// the id of the Omni asset
	PropertyId int `json:"property_id"`
	//amount of the asset on Alice side
	AmountA float64 `json:"amount_a"`
	//the omni address of fundee Bob
	FundeePubKey chainhash.Hash `json:"fundee_pub_key"`
	//amount of the asset on Bob side
	AmountB float64 `json:"amount_b"`
	//signature of fundee Bob
	FundeeSignature chainhash.Signauture `json:"fundee_signature"`
	//redeem script used to generate P2SH address
	RedeemScript string `json:"redeem_script"`
	//hash of redeemScript
	P2shAddress chainhash.Hash `json:"p2sh_address"`
	//final global channel id generated
	ChannelId ChannelID `json:"channel_id"`
}

//type: -351 (commitment_tx)
type CommitmentTx struct {
	//the global channel id.
	ChannelId ChannelID `json:"channel_id"`
	//the id of the Omni asset
	PropertyId int `json:"property_id"`
	//amount of the payment
	Amount float64 `json:"amount"`
	//private key of Alice2, encrypted by Bob's public key
	EncrptedAlice2PrivateKey chainhash.Hash `json:"encrpted_alice_2_private_key"`
}

//type: -352 (commitment_tx_signed)
type CommitmentTxSigned struct {
	//the global channel id.
	ChannelId ChannelID `json:"channel_id"`
	//the id of the Omni asset.
	PropertyId int `json:"property_id"`
	//amount of the payment.
	Amount float64 `json:"amount"`
	//signature of Bob.
	ReceiverSignature chainhash.Signauture `json:"receiver_signature"`
}

//type: -353 (get_balance_request)
type GetBalanceRequest struct {
	//the global channel id.
	ChannelId ChannelID `json:"channel_id"`
	//the p2sh address generated in funding_signed message.
	P2shAddress chainhash.Hash `json:"p_2_sh_address"`
	// the channel owner, Alice or Bob, can query the balance.
	Who chainhash.Hash `json:"who"`
	//the signature of Alice or Bob
	Signature chainhash.Signauture `json:"signature"`
}

//type: -354 (get_balance_respond)
type GetBalanceRespond struct {
	//the global channel id.
	ChannelId ChannelID `json:"channel_id"`
	//the asset id generated by Omnilayer protocol.
	PropertyId int `json:"property_id"`
	//the name of the asset.
	Name string `json:"name"`
	//balance in this channel
	Balance float64 `json:"balance"`
	//currently not in use
	Reserved float64 `json:"reserved"`
	//currently not in use
	Frozen float64 `json:"frozen"`
}
