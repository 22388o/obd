syntax = "proto3";

package proxy;
option go_package = "pb";

message Invoice{
  int64 property_id = 1;
  double value = 2;
  string memo = 3;
  string cltv_expiry = 4;
  bool private = 5;
  string payment_request = 6;
}

message AddInvoiceResponse{
  string payment_request = 1;
}

message ParseInvoiceRequest{
  string payment_request = 1;
}
message ParseInvoiceResponse{
  int64 property_id = 1;
  double value = 2;
  string memo = 3;
  string cltv_expiry = 4;
  bool private = 5;
  string h = 6;
  string recipient_node_peer_id = 7;
  string recipient_user_peer_id = 8;
}

message SendRequest{
  string payment_request = 1;
  ParseInvoiceResponse invoice_detail = 2;
}

message SendResponse{
  string payment_hash = 1;
  string payment_preimage = 2;
  double amount_to_rsmc = 3;
  double amount_to_htlc = 4;
  double amount_to_counterparty = 5;
}

message ListInvoiceRequest {
  /*
  The index of an invoice that will be used as either the start or end of a
  query to determine which invoices should be returned in the response.
  */
  uint64 index_offset = 1;
  // The max number of invoices to return in the response to this query.
  uint64 num_max_invoices = 2;
  /*
  If set, the invoices returned will result from seeking backwards from the
  specified index offset. This can be used to paginate backwards.
  */
  bool reversed = 3;
}

message ListInvoiceResponse {
  /*
  A list of invoices from the time slice of the time series specified in the
  request.
  */
  repeated Invoice invoices = 1;

  /*
  The index of the last item in the set of returned invoices. This can be used
  to seek further, pagination style.
  */
  uint64 last_index_offset = 2;

  /*
  The index of the last item in the set of returned invoices. This can be used
  to seek backwards, pagination style.
  */
  uint64 first_index_offset = 3;
}



service Htlc {
  rpc AddInvoice(Invoice) returns(AddInvoiceResponse);
  rpc ParseInvoice(ParseInvoiceRequest) returns(ParseInvoiceResponse);
  rpc ListInvoices (ListInvoiceRequest) returns (ListInvoiceResponse);
  rpc SendPayment(SendRequest) returns(SendResponse);
}