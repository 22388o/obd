syntax = "proto3";

package proxy;
option go_package = "pb";


message RecipientNodeInfo{
  string recipient_node_peer_id = 1;
  string recipient_user_peer_id = 2;
}

message ConnectPeerRequest {
  string addr = 1;
}
message ConnectPeerResponse {
}

message DisconnectPeerRequest {
  string addr = 1;
}
message DisconnectPeerResponse {
}

message OpenChannelRequest{
  string node_pubkey_string = 1;
  bool private = 2;
  RecipientNodeInfo recipientInfo = 3;
}

message OpenChannelResponse{
  string template_channel_id = 1;
}

message FundChannelRequest{
  string template_channel_id = 1;
  double btc_amount = 2;
  int64 property_id = 3;
  double asset_amount = 4;
  RecipientNodeInfo recipientInfo = 5;
}

message FundChannelResponse{
  string channel_id = 1;
}

message HelloRequest {
  string sayhi = 1;
}
message HelloResponse {
  string resp = 1;
}

message ListChannelsRequest {
  bool active_only = 1;
  bool inactive_only = 2;
  bool public_only = 3;
  bool private_only = 4;

  /*
  Filters the response for channels with a target peer's pubkey. If peer is
  empty, all channels will be returned.
  */
  bytes peer = 5;

  int32 page_size = 6;
  int32 page_index = 7;
}

message Channel {
  // Whether this channel is active or not
  bool active = 1;

  // The identity pubkey of the remote node
  string remote_pubkey = 2;

  /*
  The outpoint (txid:index) of the funding transaction. With this value, Bob
  will be able to generate a signature for Alice's version of the commitment
  transaction.
  */
  string channel_point = 3;

  string chan_id = 4 ;

  // The total amount of funds held in this channel
  int64 capacity = 5;

  // This node's current balance in this channel
  int64 local_balance = 6;

  // The counterparty's current balance in this channel
  int64 remote_balance = 7;

  /*
  The amount calculated to be paid in fees for the current set of commitment
  transactions. The fee amount is persisted with the channel in order to
  allow the fee amount to be removed and recalculated with each channel state
  update, including updates that happen after a system restart.
  */
  int64 commit_fee = 8;

  // The weight of the commitment transaction
  int64 commit_weight = 9;

  /*
  The required number of satoshis per kilo-weight that the requester will pay
  at all times, for both the funding transaction and commitment transaction.
  This value can later be updated once the channel is open.
  */
  int64 fee_per_kw = 10;

  // The unsettled balance in this channel
  int64 unsettled_balance = 11;

  /*
  The total number of satoshis we've sent within this channel.
  */
  int64 total_satoshis_sent = 12;

  /*
  The total number of satoshis we've received within this channel.
  */
  int64 total_satoshis_received = 13;

  /*
  The total number of updates conducted within this channel.
  */
  uint64 num_updates = 14;

  /*
  The list of active, uncleared HTLCs currently pending within the channel.
  */
  //  repeated HTLC pending_htlcs = 15;


  // Whether this channel is advertised to the network or not.
  bool private = 17;

  // True if we were the ones that created the channel.
  bool initiator = 18;

  // A set of flags showing the current state of the channel.
  string chan_status_flags = 19;


  // The commitment type used by this channel.
  //  CommitmentType commitment_type = 26;

  /*
  The number of seconds that the channel has been monitored by the channel
  scoring system. Scores are currently not persisted, so this value may be
  less than the lifetime of the channel [EXPERIMENTAL].
  */
  int64 lifetime = 23;

  /*
  The number of seconds that the remote peer has been observed as being online
  by the channel scoring system over the lifetime of the channel
  [EXPERIMENTAL].
  */
  int64 uptime = 24;

  /*
  Close address is the address that we will enforce payout to on cooperative
  close if the channel was opened utilizing option upfront shutdown. This
  value can be set on channel open by setting close_address in an open channel
  request. If this value is not set, you can still choose a payout address by
  cooperatively closing with the delivery_address field set.
  */
  string close_address = 25;

  /*
  The amount that the initiator of the channel optionally pushed to the remote
  party on channel open. This amount will be zero if the channel initiator did
  not push any funds to the remote peer. If the initiator field is true, we
  pushed this amount to our peer, if it is false, the remote peer pushed this
  amount to us.
  */
  uint64 push_amount_sat = 27;

  int64 property_id = 28;
}

message PendingChannelsRequest {
  int32 page_size = 1;
  int32 page_index = 2;
}

message ListChannelsResponse {
  // The list of active channels
  repeated Channel channels = 1;
}

message LatestTransactionRequest{
  string channel_id = 1;
}

message Transaction{
  string channel_id = 1;
  double amount_a = 2;
  double amount_b = 3;
  string peer_a = 4;
  string peer_b = 5;
  int32 curr_state = 6;
  string tx_hash = 7;
  int32 tx_type = 8;
  string h = 9;
  string r = 10;
  double amount_htlc = 11;
}

message GetTransactionsRequest{
  string channel_id = 1;
  int32 page_size = 2;
  int32 page_index = 3;
}
message TransactionDetails{
  repeated Transaction transactions = 1;
  int32 total_count = 2;
  int32 page_size = 3;
  int32 page_index = 4;
}

message ChannelBalanceRequest{
}

message ChannelBalanceResponse{
  double local_balance = 1;
  double remote_balance = 2;
  double unsettled_local_balance = 3;
  double unsettled_remote_balance = 4;
  double pending_open_local_balance = 5;
  double pending_open_remote_balance = 6;
}

message CloseChannelRequest{
  string channel_id = 1;
}

message CloseChannelResponse{
  string channel_id = 1;
  double local_balance = 2;
  double remote_balance = 3;
  double total_amount = 4;
  int64 property_id = 5;
}
message ChanInfoRequest{
  string channel_id = 1;
}

message ChannelEdge {
  string channel_id = 1 ;
  double total_amount = 2;
  int64 property_id = 3;
  string channel_address = 4;
  string node1_pub = 5;
  string node2_pub = 6;
  int64 curr_state = 7;
}

message ClosedChannelsRequest{
  int32 page_size = 1;
  int32 page_index = 2;
}

message ClosedChannelsResponse {
  repeated Channel channels = 1;
}

service Lightning {

  /* obdcli: `hello`
  hello is a `say hi` gRPC.
  */
  rpc Hello (HelloRequest) returns (HelloResponse);

  rpc ConnectPeer(ConnectPeerRequest) returns (ConnectPeerResponse);
  rpc DisconnectPeer(DisconnectPeerRequest) returns (DisconnectPeerResponse);

  rpc OpenChannel(OpenChannelRequest) returns(OpenChannelResponse);
  rpc CloseChannel(CloseChannelRequest) returns(CloseChannelResponse);
  rpc ClosedChannels(ClosedChannelsRequest) returns(ClosedChannelsResponse);
  rpc FundChannel(FundChannelRequest) returns(FundChannelResponse);
  rpc ListChannels(ListChannelsRequest) returns(ListChannelsResponse);
  rpc GetChanInfo(ChanInfoRequest) returns(ChannelEdge);
  rpc PendingChannels(PendingChannelsRequest) returns(ListChannelsResponse);
  rpc LatestTransaction(LatestTransactionRequest) returns(Transaction);
  rpc GetTransactions(GetTransactionsRequest) returns(TransactionDetails);

  /**
      ChannelBalance returns a report on the total funds across all open channels,
      categorized in
      local/remote,
      pending local/remote
      and unsettled local/remote balances.
   */
  rpc ChannelBalance(ChannelBalanceRequest) returns(ChannelBalanceResponse);
}






